/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  
#pragma mark - TurboSqliteCxxBaseSqlResult

template <typename P0, typename P1, typename P2>
struct [[deprecated("Use TurboSqliteCxxSqlResult instead.")]] TurboSqliteCxxBaseSqlResult {
  P0 rows;
  P1 rowsAffected;
  P2 insertId;
  bool operator==(const TurboSqliteCxxBaseSqlResult &other) const {
    return rows == other.rows && rowsAffected == other.rowsAffected && insertId == other.insertId;
  }
};

template <typename P0, typename P1, typename P2>
struct [[deprecated("Use TurboSqliteCxxSqlResultBridging instead.")]] TurboSqliteCxxBaseSqlResultBridging {
  static TurboSqliteCxxBaseSqlResult<P0, P1, P2> fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    TurboSqliteCxxBaseSqlResult<P0, P1, P2> result{
      bridging::fromJs<P0>(rt, value.getProperty(rt, "rows"), jsInvoker),
      bridging::fromJs<P1>(rt, value.getProperty(rt, "rowsAffected"), jsInvoker),
      bridging::fromJs<P2>(rt, value.getProperty(rt, "insertId"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Array rowsToJs(jsi::Runtime &rt, P0 value) {
    return bridging::toJs(rt, value);
  }

  static double rowsAffectedToJs(jsi::Runtime &rt, P1 value) {
    return bridging::toJs(rt, value);
  }

  static double insertIdToJs(jsi::Runtime &rt, P2 value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const TurboSqliteCxxBaseSqlResult<P0, P1, P2> &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "rows", bridging::toJs(rt, value.rows, jsInvoker));
    result.setProperty(rt, "rowsAffected", bridging::toJs(rt, value.rowsAffected, jsInvoker));
    result.setProperty(rt, "insertId", bridging::toJs(rt, value.insertId, jsInvoker));
    return result;
  }
};



#pragma mark - TurboSqliteCxxBaseDatabase

template <typename P0, typename P1>
struct [[deprecated("Use TurboSqliteCxxDatabase instead.")]] TurboSqliteCxxBaseDatabase {
  P0 executeSql;
  P1 close;
  bool operator==(const TurboSqliteCxxBaseDatabase &other) const {
    return executeSql == other.executeSql && close == other.close;
  }
};

template <typename P0, typename P1>
struct [[deprecated("Use TurboSqliteCxxDatabaseBridging instead.")]] TurboSqliteCxxBaseDatabaseBridging {
  static TurboSqliteCxxBaseDatabase<P0, P1> fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    TurboSqliteCxxBaseDatabase<P0, P1> result{
      bridging::fromJs<P0>(rt, value.getProperty(rt, "executeSql"), jsInvoker),
      bridging::fromJs<P1>(rt, value.getProperty(rt, "close"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Function executeSqlToJs(jsi::Runtime &rt, P0 value) {
    return bridging::toJs(rt, value);
  }

  static jsi::Function closeToJs(jsi::Runtime &rt, P1 value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const TurboSqliteCxxBaseDatabase<P0, P1> &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "executeSql", bridging::toJs(rt, value.executeSql, jsInvoker));
    result.setProperty(rt, "close", bridging::toJs(rt, value.close, jsInvoker));
    return result;
  }
};


#pragma mark - TurboSqliteCxxSqlResult

template <typename P0, typename P1, typename P2>
struct TurboSqliteCxxSqlResult {
  P0 rows;
  P1 rowsAffected;
  P2 insertId;
  bool operator==(const TurboSqliteCxxSqlResult &other) const {
    return rows == other.rows && rowsAffected == other.rowsAffected && insertId == other.insertId;
  }
};

template <typename T>
struct TurboSqliteCxxSqlResultBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.rows)>(rt, value.getProperty(rt, "rows"), jsInvoker),
      bridging::fromJs<decltype(types.rowsAffected)>(rt, value.getProperty(rt, "rowsAffected"), jsInvoker),
      bridging::fromJs<decltype(types.insertId)>(rt, value.getProperty(rt, "insertId"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Array rowsToJs(jsi::Runtime &rt, decltype(types.rows) value) {
    return bridging::toJs(rt, value);
  }

  static double rowsAffectedToJs(jsi::Runtime &rt, decltype(types.rowsAffected) value) {
    return bridging::toJs(rt, value);
  }

  static double insertIdToJs(jsi::Runtime &rt, decltype(types.insertId) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "rows", bridging::toJs(rt, value.rows, jsInvoker));
    result.setProperty(rt, "rowsAffected", bridging::toJs(rt, value.rowsAffected, jsInvoker));
    result.setProperty(rt, "insertId", bridging::toJs(rt, value.insertId, jsInvoker));
    return result;
  }
};



#pragma mark - TurboSqliteCxxDatabase

template <typename P0, typename P1>
struct TurboSqliteCxxDatabase {
  P0 executeSql;
  P1 close;
  bool operator==(const TurboSqliteCxxDatabase &other) const {
    return executeSql == other.executeSql && close == other.close;
  }
};

template <typename T>
struct TurboSqliteCxxDatabaseBridging {
  static T types;

  static T fromJs(
      jsi::Runtime &rt,
      const jsi::Object &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    T result{
      bridging::fromJs<decltype(types.executeSql)>(rt, value.getProperty(rt, "executeSql"), jsInvoker),
      bridging::fromJs<decltype(types.close)>(rt, value.getProperty(rt, "close"), jsInvoker)};
    return result;
  }

#ifdef DEBUG
  static jsi::Function executeSqlToJs(jsi::Runtime &rt, decltype(types.executeSql) value) {
    return bridging::toJs(rt, value);
  }

  static jsi::Function closeToJs(jsi::Runtime &rt, decltype(types.close) value) {
    return bridging::toJs(rt, value);
  }
#endif

  static jsi::Object toJs(
      jsi::Runtime &rt,
      const T &value,
      const std::shared_ptr<CallInvoker> &jsInvoker) {
    auto result = facebook::jsi::Object(rt);
    result.setProperty(rt, "executeSql", bridging::toJs(rt, value.executeSql, jsInvoker));
    result.setProperty(rt, "close", bridging::toJs(rt, value.close, jsInvoker));
    return result;
  }
};

class JSI_EXPORT NativeTurboSqliteCxxSpecJSI : public TurboModule {
protected:
  NativeTurboSqliteCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object openDatabase(jsi::Runtime &rt, jsi::String path) = 0;
  virtual jsi::String getVersionString(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeTurboSqliteCxxSpec : public TurboModule {
public:
  jsi::Value get(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.get(rt, propName);
  }

  static constexpr std::string_view kModuleName = "TurboSqliteCxx";

protected:
  NativeTurboSqliteCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeTurboSqliteCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

private:
  class Delegate : public NativeTurboSqliteCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeTurboSqliteCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {}

    jsi::Object openDatabase(jsi::Runtime &rt, jsi::String path) override {
      static_assert(
          bridging::getParameterCount(&T::openDatabase) == 2,
          "Expected openDatabase(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::openDatabase, jsInvoker_, instance_, std::move(path));
    }
    jsi::String getVersionString(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVersionString) == 1,
          "Expected getVersionString(...) to have 1 parameters");

      return bridging::callFromJs<jsi::String>(
          rt, &T::getVersionString, jsInvoker_, instance_);
    }

  private:
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
